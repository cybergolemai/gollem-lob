name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: gollem-lob
  FRONTEND_BUCKET: gollem-frontend-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  CLOUDFRONT_DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  backend-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster gollem-cluster \
          --service gollem-lob \
          --force-new-deployment

  frontend-deploy:
    runs-on: ubuntu-latest
    needs: backend-deploy

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync out s3://${{ env.FRONTEND_BUCKET }} --delete

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} \
          --paths "/*"

  notify:
    runs-on: ubuntu-latest
    needs: [backend-deploy, frontend-deploy]
    if: always()

    steps:
    - name: Check deploy status
      if: ${{ needs.backend-deploy.result != 'success' || needs.frontend-deploy.result != 'success' }}
      run: exit 1

    - name: Notify success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: "✅ Deploy succeeded for ${{ github.repository }}@${{ github.ref }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    - name: Notify failure
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: "❌ Deploy failed for ${{ github.repository }}@${{ github.ref }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}